# This is an auto-generated partial config. To use it with 'spacy train'
# you can run spacy init fill-config to auto-fill all default settings:
# python -m spacy init fill-config ./base_config9.cfg ./config9.cfg
[paths]
train = ./Corpus/SrpELTeC-gold-train.spacy
dev = ./Corpus/SrpELTeC-gold-dev.spacy
vectors = null
[system]
gpu_allocator = "pytorch"

[nlp]
lang = "sr"
pipeline = ["transformer","morphologizer","trainable_lemmatizer","tagger","parser", "ner"]
batch_size = 128

[components]

[components.transformer]
source = "model8\\model-best"
component = "transformer"

[components.morphologizer]
source = "model8\\model-best"
component = "morphologizer"


[components.tagger]
source = "model8\\model-best"
component ="tagger"

[components.parser]
source = "model8\\model-best"
component = "parser"

[components.trainable_lemmatizer]
source = "model8\\model-best"
component = "trainable_lemmatizer"

[components.ner]
factory = "ner"

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = true
nO = null


[components.ner.model.tok2vec]
@architectures = "spacy.Tok2Vec.v2"

[components.ner.model.tok2vec.embed]
@architectures = "spacy.MultiHashEmbed.v2"
width = ${components.ner.model.tok2vec.encode.width}
attrs = ["NORM", "PREFIX", "SUFFIX", "SHAPE"]
rows = [5000, 1000, 2500, 2500]
include_static_vectors = true

[components.ner.model.tok2vec.encode]
@architectures = "spacy.MaxoutWindowEncoder.v2"
width = 256
depth = 8
window_size = 1
maxout_pieces = 3



[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0

[training]
accumulate_gradient = 3
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
annotating_components = ["morphologizer", "trainable_lemmatizer", "tagger", "parser"]
frozen_components  = ["morphologizer", "trainable_lemmatizer", "tagger", "parser"]

[training.optimizer]
@optimizers = "Adam.v1"

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 5e-5

[training.batcher]
@batchers = "spacy.batch_by_padded.v1"
discard_oversize = true
size = 2000
buffer = 256

[initialize]
vectors = ${paths.vectors}